<?xml version="1.0" encoding="utf-8" ?>
<!-- Generated by https://github.com/segrey/jshint-doc-downloader-->
<groups>
  <group title="Enforcing options">
    <description><![CDATA[When set to true, these options will make JSHint produce more warnings about your code.]]></description>
    <options>
      <option key="bitwise">
        <description><![CDATA[This option prohibits the use of bitwise operators such as <code>^</code> (XOR),
<code>|</code> (OR) and others. Bitwise operators are very rare in JavaScript
programs and quite often <code>&amp;</code> is simply a mistyped <code>&amp;&amp;</code>.]]></description>
      </option>
      <option key="camelcase">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option allows you to force all variable names to use either
camelCase style or UPPER_CASE with underscores.</p>]]></description>
      </option>
      <option key="curly">
        <description><![CDATA[This option requires you to always put curly braces around blocks in
loops and conditionals. JavaScript allows you to omit curly braces when
the block consists of only one statement, for example:<pre><code>while (day)
  shuffle();
</code></pre><p>However, in some circumstances, it can lead to bugs (you'd think that
<code>sleep()</code> is a part of the loop while in reality it is not):</p><pre><code>while (day)
  shuffle();
  sleep();
</code></pre>]]></description>
      </option>
      <option key="enforceall">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>The option automatically opts users in to new features which             can lead to unexpected warnings/errors in when upgrading
            between minor versions of JSHint.</p></div><p>This option is a short hand for the most strict JSHint configuration. It
enables all enforcing options and disables all relaxing options.</p>]]></description>
      </option>
      <option key="eqeqeq">
        <description><![CDATA[This options prohibits the use of <code>==</code> and <code>!=</code> in favor of <code>===</code> and
<code>!==</code>. The former try to coerce values before comparing them which can
lead to some unexpected results. The latter don't do any coercion so
they are generally safer. If you would like to learn more about type
coercion in JavaScript, we recommend <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/">Truth, Equality and
JavaScript</a>
by Angus Croll.]]></description>
      </option>
      <option key="es3">
        <description><![CDATA[This option tells JSHint that your code needs to adhere to ECMAScript 3
specification. Use this option if you need your program to be executable
in older browsers—such as Internet Explorer 6/7/8/9—and other legacy
JavaScript environments.]]></description>
      </option>
      <option key="es5">
        <description><![CDATA[This option enables syntax first defined in <a href="http://es5.github.io/">the ECMAScript 5.1
specification</a>. This includes allowing reserved
keywords as object properties.]]></description>
      </option>
      <option key="forin">
        <description><![CDATA[This option requires all <code>for in</code> loops to filter object's items. The
for in statement allows for looping through the names of all of the
properties of an object including those inherited through the prototype
chain. This behavior can lead to unexpected items in your object so it
is generally safer to always filter inherited properties out as shown in
the example:<pre><code>for (key in obj) {
  if (obj.hasOwnProperty(key)) {
    // We are sure that obj[key] belongs to the object and was not inherited.
  }
}
</code></pre><p>For more in-depth understanding of <code>for in</code> loops in JavaScript, read
<a href="http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/">Exploring JavaScript for-in
loops</a>
by Angus Croll.</p>]]></description>
      </option>
      <option key="freeze">
        <description><![CDATA[This options prohibits overwriting prototypes of native objects such as
<code>Array</code>, <code>Date</code> and so on.<pre><code>// jshint freeze:true
Array.prototype.count = function (value) { return 4; };
// -&gt; Warning: Extending prototype of native object: 'Array'.
</code></pre>]]></description>
      </option>
      <option key="funcscope">
        <description><![CDATA[This option suppresses warnings about declaring variables inside of
control
structures while accessing them later from the outside. Even though
JavaScript has only two real scopes—global and function—such practice
leads to confusion among people new to the language and hard-to-debug
bugs. This is why, by default, JSHint warns about variables that are
used outside of their intended scope.<pre><code>function test() {
  if (true) {
    var x = 0;
  }

  x += 1; // Default: 'x' used out of scope.
            // No warning when funcscope:true
}
</code></pre>]]></description>
      </option>
      <option key="futurehostile">
        <description><![CDATA[This option enables warnings about the use of identifiers which are
defined in future versions of JavaScript. Although overwriting them has
no effect in contexts where they are not implemented, this practice can
cause issues when migrating codebases to newer versions of the language.]]></description>
      </option>
      <option key="globals">
        <description><![CDATA[This option can be used to specify a white list of global variables that
are not formally defined in the source code. This is most useful when
combined with the <code>undef</code> option in order to suppress warnings for
project-specific global variables.<p>Setting an entry to <code>true</code> enables reading and writing to that variable.
Setting it to <code>false</code> will trigger JSHint to consider that variable
read-only.</p><p>See also the "environment" options: a set of options to be used as short
hand for enabling global variables defined in common JavaScript
environments.</p>]]></description>
      </option>
      <option key="globalstrict">
        <description><![CDATA[This option suppresses warnings about the use of global strict mode.
Global strict mode can break third-party widgets so it is not
recommended.<p>For more info about strict mode see the <code>strict</code> option.</p>]]></description>
      </option>
      <option key="immed">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option prohibits the use of immediate function invocations without
wrapping them in parentheses. Wrapping parentheses assists readers of
your code in understanding that the expression is the result of a
function, and not the function itself.</p>]]></description>
      </option>
      <option key="indent">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness. If             you would like to enforce rules relating to code style, check
            out <a href="https://github.com/jscs-dev/node-jscs">the JSCS project</a>.</p></div><p>This option sets a specific tab width for your code.</p>]]></description>
      </option>
      <option key="iterator">
        <description><![CDATA[This option suppresses warnings about the <code>__iterator__</code> property. This
property is not supported by all browsers so use it carefully.]]></description>
      </option>
      <option key="latedef">
        <description><![CDATA[This option prohibits the use of a variable before it was defined.
JavaScript has function scope only and, in addition to that, all variables
are always moved—or hoisted— to the top of the function. This behavior can
lead to some very nasty bugs and that's why it is safer to always use
variable only after they have been explicitly defined.<p>Setting this option to "nofunc" will allow function declarations to be
ignored.</p><p>For more in-depth understanding of scoping and hoisting in JavaScript,
read <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting">JavaScript Scoping and
Hoisting</a>
by Ben Cherry.</p>]]></description>
      </option>
      <option key="maxcomplexity">
        <description><![CDATA[This option lets you control cyclomatic complexity throughout your code.
Cyclomatic complexity measures the number of linearly independent paths
through a program's source code. Read more about <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity on
Wikipedia</a>.]]></description>
      </option>
      <option key="maxdepth">
        <description><![CDATA[This option lets you control how nested do you want your blocks to be:<pre><code>// jshint maxdepth:2

function main(meaning) {
  var day = true;

  if (meaning === 42) {
    while (day) {
      shuffle();

      if (tired) { // JSHint: Blocks are nested too deeply (3).
          sleep();
      }
    }
  }
}
</code></pre>]]></description>
      </option>
      <option key="maxerr">
        <description><![CDATA[This options allows you to set the maximum amount of warnings JSHint will
produce before giving up. Default is 50.]]></description>
      </option>
      <option key="maxlen">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness. If             you would like to enforce rules relating to code style, check
            out <a href="https://github.com/jscs-dev/node-jscs">the JSCS project</a>.</p></div><p>This option lets you set the maximum length of a line.</p>]]></description>
      </option>
      <option key="maxparams">
        <description><![CDATA[This option lets you set the max number of formal parameters allowed per
function:<pre><code>// jshint maxparams:3

function login(request, onSuccess) {
  // ...
}

// JSHint: Too many parameters per function (4).
function logout(request, isManual, whereAmI, onSuccess) {
  // ...
}
</code></pre>]]></description>
      </option>
      <option key="maxstatements">
        <description><![CDATA[This option lets you set the max number of statements allowed per function:<pre><code>// jshint maxstatements:4

function main() {
  var i = 0;
  var j = 0;

  // Function declarations count as one statement. Their bodies
  // don't get taken into account for the outer function.
  function inner() {
    var i2 = 1;
    var j2 = 1;

    return i2 + j2;
  }

  j = i + j;
  return j; // JSHint: Too many statements per function. (5)
}
</code></pre>]]></description>
      </option>
      <option key="newcap">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option requires you to capitalize names of constructor functions.
Capitalizing functions that are intended to be used with <code>new</code> operator
is just a convention that helps programmers to visually distinguish
constructor functions from other types of functions to help spot
mistakes when using <code>this</code>.</p><p>Not doing so won't break your code in any browsers or environments but
it will be a bit harder to figure out—by reading the code—if the
function was supposed to be used with or without new. And this is
important because when the function that was intended to be used with
<code>new</code> is used without it, <code>this</code> will point to the global object instead
of a new object.</p>]]></description>
      </option>
      <option key="noarg">
        <description><![CDATA[This option prohibits the use of <code>arguments.caller</code> and
<code>arguments.callee</code>.  Both <code>.caller</code> and <code>.callee</code> make quite a few
optimizations impossible so they were deprecated in future versions of
JavaScript. In fact, ECMAScript 5 forbids the use of <code>arguments.callee</code>
in strict mode.]]></description>
      </option>
      <option key="nocomma">
        <description><![CDATA[This option prohibits the use of the comma operator. When misused, the
comma operator can obscure the value of a statement and promote
incorrect code.]]></description>
      </option>
      <option key="noempty">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option warns when you have an empty block in your code. JSLint was
originally warning for all empty blocks and we simply made it optional.
There were no studies reporting that empty blocks in JavaScript break
your code in any way.</p>]]></description>
      </option>
      <option key="nonbsp">
        <description><![CDATA[This option warns about "non-breaking whitespace" characters. These
characters can be entered with option-space on Mac computers and have a
potential of breaking non-UTF8 web pages.]]></description>
      </option>
      <option key="nonew">
        <description><![CDATA[This option prohibits the use of constructor functions for side-effects.
Some people like to call constructor functions without assigning its
result to any variable:<pre><code>new MyConstructor();
</code></pre><p>There is no advantage in this approach over simply calling
<code>MyConstructor</code> since the object that the operator <code>new</code> creates isn't
used anywhere so you should generally avoid constructors like this one.</p>]]></description>
      </option>
      <option key="notypeof">
        <description><![CDATA[This option suppresses warnings about invalid <code>typeof</code> operator values.
This operator has only <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">a limited set of possible return
values</a>.
By default, JSHint warns when you compare its result with an invalid
value which often can be a typo.<pre><code>// 'fuction' instead of 'function'
if (typeof a == "fuction") { // Invalid typeof value 'fuction'
  // ...
}
</code></pre><p>Do not use this option unless you're absolutely sure you don't want
these checks.</p>]]></description>
      </option>
      <option key="quotmark">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness. If             you would like to enforce rules relating to code style, check
            out <a href="https://github.com/jscs-dev/node-jscs">the JSCS project</a>.</p></div><p>This option enforces the consistency of quotation marks used throughout
your code. It accepts three values: <code>true</code> if you don't want to enforce
one particular style but want some consistency, <code>"single"</code> if you want to
allow only single quotes and <code>"double"</code> if you want to allow only double
quotes.</p>]]></description>
      </option>
      <option key="shadow">
        <description><![CDATA[This option suppresses warnings about variable shadowing i.e. declaring a
variable that had been already declared somewhere in the outer scope.<ul>
<li>"inner"  - check for variables defined in the same scope only</li>
<li>"outer"  - check for variables defined in outer scopes as well</li>
<li>false    - same as inner</li>
<li>true     - allow variable shadowing</li>
</ul>]]></description>
      </option>
      <option key="singleGroups">
        <description><![CDATA[This option prohibits the use of the grouping operator when it is not
strictly required. Such usage commonly reflects a misunderstanding of
unary operators, for example:<pre><code>// jshint singleGroups: true

delete(obj.attr); // Warning: Unnecessary grouping operator.
</code></pre>]]></description>
      </option>
      <option key="undef">
        <description><![CDATA[This option prohibits the use of explicitly undeclared variables. This
option is very useful for spotting leaking and mistyped variables.<pre><code>// jshint undef:true

function test() {
  var myVar = 'Hello, World';
  console.log(myvar); // Oops, typoed here. JSHint with undef will complain
}
</code></pre><p>If your variable is defined in another file, you can use the <code>global</code>
directive to tell JSHint about it.</p>]]></description>
      </option>
      <option key="unused">
        <description><![CDATA[This option warns when you define and never use your variables. It is very
useful for general code cleanup, especially when used in addition to
<code>undef</code>.<pre><code>// jshint unused:true

function test(a, b) {
  var c, d = 2;

  return a + d;
}

test(1, 2);

// Line 3: 'b' was defined but never used.
// Line 4: 'c' was defined but never used.
</code></pre><p>In addition to that, this option will warn you about unused global
variables declared via the <code>global</code> directive.</p><p>This can be set to <code>vars</code> to only check for variables, not function
parameters, or <code>strict</code> to check all variables and parameters.  The
default (true) behavior is to allow unused parameters that are followed by
a used parameter.</p>]]></description>
      </option>
    </options>
  </group>
  <group title="Relaxing options">
    <description><![CDATA[When set to true, these options will make JSHint produce fewer warnings about your code.]]></description>
    <options>
      <option key="asi">
        <description><![CDATA[This option suppresses warnings about missing semicolons. There is a lot
of FUD about semicolon spread by quite a few people in the community.
The common myths are that semicolons are required all the time (they are
not) and that they are unreliable. JavaScript has rules about semicolons
which are followed by <em>all</em> browsers so it is up to you to decide
whether you should or should not use semicolons in your code.<p>For more information about semicolons in JavaScript read <a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">An Open Letter
to JavaScript Leaders Regarding
Semicolons</a>
by Isaac Schlueter and <a href="http://inimino.org/~inimino/blog/javascript_semicolons">JavaScript Semicolon
Insertion</a>.</p>]]></description>
      </option>
      <option key="boss">
        <description><![CDATA[This option suppresses warnings about the use of assignments in cases
where comparisons are expected. More often than not, code like <code>if (a =
10) {}</code> is a typo. However, it can be useful in cases like this one:<pre><code>for (var i = 0, person; person = people[i]; i++) {}
</code></pre><p>You can silence this error on a per-use basis by surrounding the assignment
with parenthesis, such as:</p><pre><code>for (var i = 0, person; (person = people[i]); i++) {}
</code></pre>]]></description>
      </option>
      <option key="debug">
        <description><![CDATA[This option suppresses warnings about the <code>debugger</code> statements in your
code.]]></description>
      </option>
      <option key="elision">
        <description><![CDATA[This option tells JSHint that your code uses ES3 array elision elements,
or empty elements (for example, <code>[1, , , 4, , , 7]</code>).]]></description>
      </option>
      <option key="eqnull">
        <description><![CDATA[This option suppresses warnings about <code>== null</code> comparisons. Such
comparisons are often useful when you want to check if a variable is
<code>null</code> or <code>undefined</code>.]]></description>
      </option>
      <option key="esnext">
        <description><![CDATA[This option tells JSHint that your code uses ECMAScript 6 specific
syntax. Note that these features are not finalized yet and not all
browsers implement them.<p>More info:</p><ul>
<li><a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">Draft Specification for ES.next (ECMA-262 Ed.
6)</a></li>
</ul>]]></description>
      </option>
      <option key="evil">
        <description><![CDATA[This option suppresses warnings about the use of <code>eval</code>. The use of
<code>eval</code> is discouraged because it can make your code vulnerable to
various injection attacks and it makes it hard for JavaScript
interpreter to do certain optimizations.]]></description>
      </option>
      <option key="expr">
        <description><![CDATA[This option suppresses warnings about the use of expressions where
normally you would expect to see assignments or function calls. Most of
the time, such code is a typo. However, it is not forbidden by the spec
and that's why this warning is optional.]]></description>
      </option>
      <option key="lastsemic">
        <description><![CDATA[This option suppresses warnings about missing semicolons, but only when
the semicolon is omitted for the last statement in a one-line block:<pre><code>var name = (function() { return 'Anton' }());
</code></pre><p>This is a very niche use case that is useful only when you use automatic
JavaScript code generators.</p>]]></description>
      </option>
      <option key="laxbreak">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option suppresses most of the warnings about possibly unsafe line
breakings in your code. It doesn't suppress warnings about comma-first
coding style. To suppress those you have to use <code>laxcomma</code> (see below).</p>]]></description>
      </option>
      <option key="laxcomma">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option suppresses warnings about comma-first coding style:</p><pre><code>var obj = {
    name: 'Anton'
  , handle: 'valueof'
  , role: 'SW Engineer'
};
</code></pre>]]></description>
      </option>
      <option key="loopfunc">
        <description><![CDATA[This option suppresses warnings about functions inside of loops.
Defining functions inside of loops can lead to bugs such as this one:<pre><code>var nums = [];

for (var i = 0; i &lt; 10; i++) {
  nums[i] = function (j) {
    return i + j;
  };
}

nums[0](2); // Prints 12 instead of 2
</code></pre><p>To fix the code above you need to copy the value of <code>i</code>:</p><pre><code>var nums = [];

for (var i = 0; i &lt; 10; i++) {
  (function (i) {
    nums[i] = function (j) {
        return i + j;
    };
  }(i));
}
</code></pre>]]></description>
      </option>
      <option key="moz">
        <description><![CDATA[This options tells JSHint that your code uses Mozilla JavaScript
extensions. Unless you develop specifically for the Firefox web browser
you don't need this option.<p>More info:</p><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7">New in JavaScript
1.7</a></li>
</ul>]]></description>
      </option>
      <option key="multistr">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option suppresses warnings about multi-line strings. Multi-line
strings can be dangerous in JavaScript because all hell breaks loose if
you accidentally put a whitespace in between the escape character (<code>\</code>)
and a new line.</p><p>Note that even though this option allows correct multi-line strings, it
still warns about multi-line strings without escape characters or with
anything in between the escape character and a whitespace.</p><pre><code>// jshint multistr:true

var text = "Hello\
World"; // All good.

text = "Hello
World"; // Warning, no escape character.

text = "Hello\
World"; // Warning, there is a space after \
</code></pre>]]></description>
      </option>
      <option key="noyield">
        <description><![CDATA[This option suppresses warnings about generator functions with no
<code>yield</code> statement in them.]]></description>
      </option>
      <option key="phantom">
        <description><![CDATA[This option defines globals available when your core is running inside
of the PhantomJS runtime environment. <a href="http://phantomjs.org/">PhantomJS</a>
is a headless WebKit scriptable with a JavaScript API. It has fast and
native support for various web standards: DOM handling, CSS selector,
JSON, Canvas, and SVG.]]></description>
      </option>
      <option key="plusplus">
        <description><![CDATA[This option prohibits the use of unary increment and decrement
operators.  Some people think that <code>++</code> and <code>--</code> reduces the quality of
their coding styles and there are programming languages—such as
Python—that go completely without these operators.]]></description>
      </option>
      <option key="proto">
        <description><![CDATA[This option suppresses warnings about the <code>__proto__</code> property.]]></description>
      </option>
      <option key="scripturl">
        <description><![CDATA[This option suppresses warnings about the use of script-targeted
URLs—such as <code>javascript:...</code>.]]></description>
      </option>
      <option key="strict">
        <description><![CDATA[This option requires all functions to run in ECMAScript 5's strict mode.
<a href="https://developer.mozilla.org/en/JavaScript/Strict_mode">Strict mode</a>
is a way to opt in to a restricted variant of JavaScript. Strict mode
eliminates some JavaScript pitfalls that didn't cause errors by changing
them to produce errors.  It also fixes mistakes that made it difficult
for the JavaScript engines to perform certain optimizations.<p><em>Note:</em> This option enables strict mode for function scope only. It
<em>prohibits</em> the global scoped strict mode because it might break
third-party widgets on your page. If you really want to use global
strict mode, see the <em>globalstrict</em> option.</p>]]></description>
      </option>
      <option key="sub">
        <description><![CDATA[<div class="deprecation-msg"><strong>Warning</strong> This option has been deprecated and will be removed in the next major release of JSHint. <p>JSHint is limiting its scope to issues of code correctness.             If you would like to enforce rules relating to code style,
            check out <a href="https://github.com/jscs-dev/node-jscs">the JSCS
            project</a>.</p></div><p>This option suppresses warnings about using <code>[]</code> notation when it can be
expressed in dot notation: <code>person['name']</code> vs. <code>person.name</code>.</p>]]></description>
      </option>
      <option key="supernew">
        <description><![CDATA[This option suppresses warnings about "weird" constructions like
<code>new function () { ... }</code> and <code>new Object;</code>. Such constructions are
sometimes used to produce singletons in JavaScript:<pre><code>var singleton = new function() {
  var privateVar;

  this.publicMethod  = function () {}
  this.publicMethod2 = function () {}
};
</code></pre>]]></description>
      </option>
      <option key="validthis">
        <description><![CDATA[This option suppresses warnings about possible strict violations when
the code is running in strict mode and you use <code>this</code> in a
non-constructor function. You should use this option—in a function scope
only—when you are positive that your use of <code>this</code> is valid in the
strict mode (for example, if you call your function using
<code>Function.call</code>).<p><strong>Note:</strong> This option can be used only inside of a function scope.
JSHint will fail with an error if you will try to set this option
globally.</p>]]></description>
      </option>
      <option key="withstmt">
        <description><![CDATA[This option suppresses warnings about the use of the <code>with</code> statement.
The semantics of the <code>with</code> statement can cause confusion among
developers and accidental definition of global variables.<p>More info:</p><ul>
<li><a href="http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/">with Statement Considered
Harmful</a></li>
</ul>]]></description>
      </option>
    </options>
  </group>
  <group title="Environments">
    <description><![CDATA[These options let JSHint know about some pre-defined global variables.]]></description>
    <options>
      <option key="browser">
        <description><![CDATA[This option defines globals exposed by modern browsers: all the way from
good old <code>document</code> and <code>navigator</code> to the HTML5 <code>FileReader</code> and other
new developments in the browser world.<p><strong>Note:</strong> This option doesn't expose variables like <code>alert</code> or
<code>console</code>. See option <code>devel</code> for more information.</p>]]></description>
      </option>
      <option key="browserify">
        <description><![CDATA[This option defines globals available when using <a href="http://browserify.org/">the Browserify
tool</a> to build a project.]]></description>
      </option>
      <option key="couch">
        <description><![CDATA[This option defines globals exposed by
<a href="http://couchdb.apache.org/">CouchDB</a>. CouchDB is a document-oriented
database that can be queried and indexed in a MapReduce fashion using
JavaScript.]]></description>
      </option>
      <option key="devel">
        <description><![CDATA[This option defines globals that are usually used for logging poor-man's
debugging: <code>console</code>, <code>alert</code>, etc. It is usually a good idea to not
ship them in production because, for example, <code>console.log</code> breaks in
legacy versions of Internet Explorer.]]></description>
      </option>
      <option key="dojo">
        <description><![CDATA[This option defines globals exposed by the <a href="http://dojotoolkit.org/">Dojo
Toolkit</a>.]]></description>
      </option>
      <option key="jasmine">
        <description><![CDATA[This option defines globals exposed by <a href="https://jasmine.github.io/">the Jasmine unit testing
framework</a>.]]></description>
      </option>
      <option key="jquery">
        <description><![CDATA[This option defines globals exposed by the <a href="http://jquery.com/">jQuery</a>
JavaScript library.]]></description>
      </option>
      <option key="mocha">
        <description><![CDATA[This option defines globals exposed by the "BDD" and "TDD" UIs of the
<a href="http://mochajs.org/">Mocha unit testing framework</a>.]]></description>
      </option>
      <option key="mootools">
        <description><![CDATA[This option defines globals exposed by the
<a href="http://mootools.net/">MooTools</a> JavaScript framework.]]></description>
      </option>
      <option key="node">
        <description><![CDATA[This option defines globals available when your code is running inside
of the Node runtime environment. <a href="http://nodejs.org/">Node.js</a> is a
server-side JavaScript environment that uses an asynchronous
event-driven model. This option also skips some warnings that make sense
in the browser environments but don't make sense in Node such as
file-level <code>use strict</code> pragmas and <code>console.log</code> statements.]]></description>
      </option>
      <option key="nonstandard">
        <description><![CDATA[This option defines non-standard but widely adopted globals such as
<code>escape</code> and <code>unescape</code>.]]></description>
      </option>
      <option key="prototypejs">
        <description><![CDATA[This option defines globals exposed by the
<a href="http://www.prototypejs.org/">Prototype</a> JavaScript framework.]]></description>
      </option>
      <option key="qunit">
        <description><![CDATA[This option defines globals exposed by <a href="http://qunitjs.com/">the QUnit unit testing
framework</a>.]]></description>
      </option>
      <option key="rhino">
        <description><![CDATA[This option defines globals available when your code is running inside
of the Rhino runtime environment. <a href="http://www.mozilla.org/rhino/">Rhino</a>
is an open-source implementation of JavaScript written entirely in Java.]]></description>
      </option>
      <option key="shelljs">
        <description><![CDATA[This option defines globals exposed by <a href="http://documentup.com/arturadib/shelljs">the ShellJS
library</a>.]]></description>
      </option>
      <option key="typed">
        <description><![CDATA[This option defines globals for typed array constructors.<p>More info:</p><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays">JavaScript typed
arrays</a></li>
</ul>]]></description>
      </option>
      <option key="worker">
        <description><![CDATA[This option defines globals available when your code is running inside
of a Web Worker. <a href="https://developer.mozilla.org/en/Using_web_workers">Web
Workers</a> provide a
simple means for web content to run scripts in background threads.]]></description>
      </option>
      <option key="wsh">
        <description><![CDATA[This option defines globals available when your code is running as a
script for the <a href="http://en.wikipedia.org/wiki/Windows_Script_Host">Windows Script
Host</a>.]]></description>
      </option>
      <option key="yui">
        <description><![CDATA[This option defines globals exposed by the <a href="http://yuilibrary.com/">YUI</a>
JavaScript framework.]]></description>
      </option>
    </options>
  </group>
</groups>