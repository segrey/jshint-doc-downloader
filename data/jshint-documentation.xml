<?xml version="1.0" encoding="utf-8" ?>
<groups>
  <group title="Enforcing Options">
    <description><![CDATA[These options tell JSHint to be more strict towards your code. Use them if you want
		to allow only a safe subset of JavaScript—very useful when your codebase is shared
		with a big number of developers with different skill levels.]]></description>
    <options>
      <option key="bitwise">
        <description><![CDATA[
						<p>This option prohibits the use of bitwise operators such as <code>^</code> (XOR),
						<code>|</code> (OR) and others. Bitwise operators are very rare in JavaScript programs
						and very often <code>&amp;</code> is simply a mistyped <code>&amp;&amp;</code>.</p>
					]]></description>
      </option>
      <option key="camelcase">
        <description><![CDATA[
						<p>This option allows you to force all variable names to use either camelCase
						style or UPPER_CASE with underscores.</p>
					]]></description>
      </option>
      <option key="curly">
        <description><![CDATA[
						<p>This option requires you to always put curly braces around blocks in loops
							and conditionals. JavaScript allows you to omit curly braces when the block
							consists of only one statement, for example:</p>
<pre>while (day)
shuffle();</pre>
						<p>However, in some circumstances, it can lead to bugs:</p>
<pre>while (day)
shuffle();
sleep(); // You would think that this is a part of your loop, but it is not.</pre>

<p>Generally, unless you are careful, it is safer to require curly braces around all blocks.</p>
					]]></description>
      </option>
      <option key="eqeqeq">
        <description><![CDATA[
						<p>This options prohibits the use of <code>==</code> and <code>!=</code> in favor
						of <code>===</code> and <code>!==</code>. The former try to coerce values before
						comparing them which can lead to some unexpected results.
						The latter don't do any coercion so they are generally safer.

						If you would like to learn more about type coercion in JavaScript, we recommend
						<a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/">Truth, Equality and JavaScript</a> by Angus Croll.</p>

						<p><strong>Note:</strong> Even if this option is off, JSHint will check for unsafe
						comparisons like <code>!= null</code> unless option <code>eqnull</code> (see below)
						is turned on.</p>
					]]></description>
      </option>
      <option key="forin">
        <description><![CDATA[
						<p>This option requires all <code>for in</code> loops to filter object's items.
						The <code>for in</code> statement allows for looping through the names of all of
						the properties of an object including those inherited throught the prototype chain.
						This behavior can lead to unexpected items in your object so it is generally
						safer to always filter inherited properties out as shown in the example:</p>
<pre>for (key in obj) {
if (obj.hasOwnProperty(key)) {
// We are sure that obj[key] belongs to the object and was not inherited.
}
}</pre>

						<p>For more in-depth understanding of <code>for in</code> loops in JavaScript,
						read <a href="http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/">Exploring JavaScript for-in loops</a> by Angus Croll.</p>
					]]></description>
      </option>
      <option key="immed">
        <description><![CDATA[
						<p>This option prohibits the use of immediate function invocations without wrapping
						them in parentheses. Wrapping parentheses assists readers of your code in
						understanding that the expression is the result of a function, and not the function
						itself.</p>
					]]></description>
      </option>
      <option key="indent">
        <description><![CDATA[
						<p>This option enforces specific tab width for your code. For example, the following
						code will trigger a warning on line 4:</p>

<pre>/*jshint indent:4 */

if (cond) {
doSomething(); // We used only two spaces for indentation here
}</pre>
					]]></description>
      </option>
      <option key="latedef">
        <description><![CDATA[
						<p>This option prohibits the use of a variable before it was defined. JavaScript
						has function scope only and, in addition to that, all variables are always
						moved—or hoisted— to the top of the function. This behavior can lead
						to some very nasty bugs and that's why it is safer to always use variable only after
						they have been explicitly defined.</p>
						<p>For more in-depth understanding of scoping and hoisting in JavaScript,
						read <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting">JavaScript
						Scoping and Hoisting</a> by Ben Cherry.</p>
					]]></description>
      </option>
      <option key="newcap">
        <description><![CDATA[
						<p>This option requires you to capitalize names of constructor functions.
						Capitalizing functions that are intended to be used with <code>new</code> operator
						is just a convention that helps programmers to visually distinguish constructor
						functions from other types of functions to help spot mistakes when using
						<code>this</code>.</p>

						<p>Not doing so won't break your code in any browsers or environments but it will
						be a bit harder to figure out—by reading the code—if the function was
						supposed to be used with or without <code>new</code>. And this is important because
						when the function that was intended to be used with <code>new</code> is used without
						it, <code>this</code> will point to the global object instead of a new object.</p>

<pre>function MyConstructor() {
console.log(this);
}

new MyConstructor(); // - [MyConstructor]
MyConstructor();     // - [DOMWindow]
</pre>

						<p>For a more in-depth understanding on how <code>this</code> works, read
						<a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Understanding JavaScript Function Invocation and "this"</a> by Yehuda Katz.</p>
					]]></description>
      </option>
      <option key="noarg">
        <description><![CDATA[
						<p>This option prohibits the use of <code>arguments.caller</code> and
						<code>arguments.callee</code>. Both <code>.caller</code> and <code>.callee</code>
						make quite a few optimizations impossible so they were deprecated in
						future versions of JavaScript. In fact, EcmaScript 5 forbids the use of
						<code>arguments.callee</code> in strict mode.</p>
					]]></description>
      </option>
      <option key="noempty">
        <description><![CDATA[
						<p>This option warns when you have an empty block in your code. JSLint was
					originally warning for all empty blocks and we simply made it optional. There were
					no studies reporting that empty blocks in JavaScript break your code in any way.</p>
					]]></description>
      </option>
      <option key="nonew">
        <description><![CDATA[
						<p>This option prohibits the use of constructor functions for side-effects. Some
						people like to call constructor functions without assigning its result to any
						variable:</p>
						<pre>new MyConstructor();</pre>
						<p>There is no advantage in this approach over simply calling MyConstructor since
						the object that the operator <code>new</code> creates isn't used anywhere so you
						should generally avoid constructors like this one.</p>
					]]></description>
      </option>
      <option key="plusplus">
        <description><![CDATA[<p>This option prohibits the use of unary increment and decrement operators. Some
					people think that <code>++</code> and <code>--</code> reduces the quality of their
					coding styles and there are programming languages—such as Python—that
					go completely without these operators.</p>]]></description>
      </option>
      <option key="quotmark">
        <description><![CDATA[<p>This option enforces the consistency of quotation marks used throughout your
					code. It accepts three values: <code>true</code> if you don't want to enforce one
					particular style but want some consistency, <code>"single"</code> if you want to
					allow only single quotes and <code>"double"</code> if you want to allow only double
					quotes.</p>]]></description>
      </option>
      <option key="regexp">
        <description><![CDATA[
						<p>This option prohibits the use of unsafe <code>.</code> in regular expressions.</p>
					]]></description>
      </option>
      <option key="undef">
        <description><![CDATA[
						<p>This option prohibits the use of explicitly undeclared variables. This option
						is very useful for spotting leaking and mistyped variables.</p>
<pre>/*jshint undef:true */

function test() {
var myVar = 'Hello, World';
console.log(myvar); // Oops, typoed here. JSHint with undef will complain
}</pre>

						<p>If your variable is defined in another file, you can use
						<code>/*global ... */</code> syntaxto tell JSHint about it. See the
						<a href="/about/">About page</a> for more information.</p>
					]]></description>
      </option>
      <option key="unused">
        <description><![CDATA[
						<p>This option warns when you define and never use your variables. It is very
						useful for general code cleanup, especially when used in addition to <code>undef</code>.</p>

<pre>/*jshint unused:true */

function test(a, b) {
var c, d = 2;

return a + d;
}

test(1, 2);

// Line 3: 'b' was defined but never used.
// Line 4: 'c' was defined but never used.</pre>

						<p>In addition to that, this option will warn you about unused global variables declared
						via <code>/*global ... */</code>.</p>
					 ]]></description>
      </option>
      <option key="strict">
        <description><![CDATA[
						<p>This option requires all functions to run in EcmaScript 5's strict mode.
					<a href="https://developer.mozilla.org/en/JavaScript/Strict_mode">Strict mode</a> is
					a way to opt in to a restricted variant of JavaScript. Strict mode eliminates some
					JavaScript pitfalls that didn't cause errors by changing them to produce errors. It
					also fixes mistakes that made it difficult for the JavaScript engines to perform
					certain optimizations.</p>

						<p><strong>Note:</strong> This option enables strict mode for function scope only.
						It <strong>prohibits</strong> the global scoped strict mode because it might break
						third-party widgets on your page. If you really want to use global strict mode,
						see the <strong>globalstrict</strong> option.</p>
					]]></description>
      </option>
      <option key="trailing">
        <description><![CDATA[
						<p>This option makes it an error to leave a trailing whitespace in your code.
						Trailing whitespaces can be source of nasty bugs with multi-line strings in
						JavaScript:</p>

<pre>// This otherwise perfectly valid string will error if
// there is a whitespace after \
var str = "Hello \
World";</pre>
					]]></description>
      </option>
      <option key="maxparams">
        <description><![CDATA[
						<p>This option lets you set the max number of formal parameters allowed
						per function:</p>

<pre>/*jshint maxparams:3 */

function login(request, onSuccess) {
// ...
}

// JSHint: Too many parameters per function (4).
function logout(request, isManual, whereAmI, onSuccess) {
// ...
}</pre>
					]]></description>
      </option>
      <option key="maxdepth">
        <description><![CDATA[
						<p>This option lets you control how nested do you want your blocks to be:</p>

<pre>/*jshint maxdepth:2 */

function main(meaning) {
var day = true;

if (meaning === 42) {
while (day) {
	shuffle();

	if (tired) { // JSHint: Blocks are nested too deeply (3).
		sleep();
	}
}
}
}</pre>
					]]></description>
      </option>
      <option key="maxstatements">
        <description><![CDATA[
						<p>This option lets you set the max number of statements allowed per function:</p>

<pre>/*jshint maxstatements:4 */

function main() {
var i = 0;
var j = 0;

// Function declarations count as one statement. Their bodies
// don't get taken into account for the outer function.
function inner() {
var i2 = 1;
var j2 = 1;

return i2 + j2;
}

j = i + j;
return j; // JSHint: Too many statements per function. (5)
}</pre>
					]]></description>
      </option>
      <option key="maxcomplexity">
        <description><![CDATA[
						<p>This option lets you control cyclomatic complexity throughout your code. Cyclomatic
						complexity measures the number of linearly independent paths through a program's
						source code. Read more about
						<a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity on
							Wikipedia</a>.</p>
					]]></description>
      </option>
      <option key="maxlen">
        <description><![CDATA[
						<p>This option lets you set the maximum length of a line.</p>
					]]></description>
      </option>
    </options>
  </group>
  <group title="Relaxing Options">
    <description><![CDATA[These options allow you to suppress certain types of warnings. Use them only if you
		are absolutely positive that you know what you are doing.]]></description>
    <options>
      <option key="asi">
        <description><![CDATA[
						<p>This option suppresses warnings about missing semicolons. There is a lot of FUD
						(fear, uncertainty and doubt) spread about semicolon spreaded by quite a few people
						in the community. The common myths are that semicolons are required all the time (they are not) and that they are unreliable. JavaScript has rules about semicolons which are
						followed by <strong>all</strong> browsers so it is up to you to decide whether you
						should or should not use semicolons in your code.</p>

						<p>For more information about semicolons in JavaScript read
						<a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">An Open Letter to JavaScript Leaders Regarding Semicolons</a> by Isaac Schlueter and
						<a href="http://inimino.org/~inimino/blog/javascript_semicolons">JavaScript
						Semicolon Insertion</a>.</p>
					]]></description>
      </option>
      <option key="boss">
        <description><![CDATA[
						<p>This option suppresses warnings about the use of assignments in cases where
						comparisons are expected. More often than not, code like <code>if (a = 10) {}</code>
						is a typo. However, it can be useful in cases like this one:</p>
						<pre>for (var i = 0, person; person = people[i]; i++) {}</pre>
					]]></description>
      </option>
      <option key="debug">
        <description><![CDATA[<p>This option suppresses warnings about the <code>debugger</code> statements in
					your code.</p>]]></description>
      </option>
      <option key="eqnull">
        <description><![CDATA[<p>This option suppresses warnings about <code>== null</code> comparisons. Such
					comparisons are often useful when you want to check if a variable is <code>null</code>
					<strong>or</strong> <code>undefined</code>.</p>]]></description>
      </option>
      <option key="es5">
        <description><![CDATA[
						<p>This option tells JSHint that your code uses ECMAScript 5 specific features such
						as getters and setters. Note that not all browsers implement these features.</p>

						<p>More info:</p>
						<ol>
							<li><a href="http://kangax.github.com/es5-compat-table/">ES5 compatibility table</a> by
							Juriy Zaytsev</li>
							<li><a href="https://developer.mozilla.org/En/javascript/ECMAScript_5_support_in_Mozilla">ECMAScript 5 support in Mozilla</a></li>
						</ol>
					]]></description>
      </option>
      <option key="esnext">
        <description><![CDATA[
						<p>This option tells JSHint that your code uses ES.next specific features such as
						<code>const</code>. Note that these features are not finalized
						yet and not all browsers implement them.</p>

						<p>More info:</p>
						<ol>
							<li><a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">
							Draft Specification for ES.next (ECMA-262 Ed. 6)</a></li>
						</ol>
					]]></description>
      </option>
      <option key="evil">
        <description><![CDATA[
						<p>This option suppresses warnings about the use of <code>eval</code>. The use of
						<code>eval</code> is discouraged because it can make your code vulnerable to
						various injection attacks and it makes it hard for JavaScript interpreter to
						do certain optimizations.</p>
					]]></description>
      </option>
      <option key="expr">
        <description><![CDATA[
						<p>This option suppresses warnings about the use of expressions where normally
						you would expect to see assignments or function calls. Most of the time, such
						code is a typo. However, it is not forbidden by the spec and that's why
						this warning is optional.</p>
					]]></description>
      </option>
      <option key="funcscope">
        <description><![CDATA[
						<p>This option suppresses warnings about declaring variables inside of control
						structures while accessing them later from the outside. Even though JavaScript has
						only two real scopes—global and function—such practice leads to
						confusion among people new to the language and hard-to-debug bugs. This is way,
						by default, JSHint warns about variables that are used outside of their intended
						scope.</p>

<pre>function test() {
if (true) {
var x = 0;
}

x += 1; // Default: 'x' used out of scope.
			// No warning when funcscope:true
}
</pre>
					]]></description>
      </option>
      <option key="globalstrict">
        <description><![CDATA[
						<p>This option suppresses warnings about the use of global strict mode. Global
						strict mode can break third-party widgets so it is not recommended.</p>

						<p>For more info about strict mode see the <code>strict</code> option.</p>
					]]></description>
      </option>
      <option key="iterator">
        <description><![CDATA[
						<p>This option suppresses warnings about the <code>__iterator__</code> property.
						This property is not supported by all browsers so use it carefully.</p>
					]]></description>
      </option>
      <option key="lastsemic">
        <description><![CDATA[
						<p>This option suppresses warnings about missing semicolons, but only when
						the semicolon is omitted for the last statement in a one-line block:</p>
						<pre>var name = (function() { return 'Anton' }());</pre>
						<p>This is a very niche use case that is useful only when you use automatic
						JavaScript code generators.</p>
					]]></description>
      </option>
      <option key="laxbreak">
        <description><![CDATA[
						<p>This option suppresses most of the warnings about possibly unsafe line breakings in
						your code. It doesn't suppress warnings about comma-first coding style. To suppress
						those you have to use <code>laxcomma</code> (see below).</p>
					]]></description>
      </option>
      <option key="laxcomma">
        <description><![CDATA[
						<p>This option suppresses warnings about comma-first coding style:</p>
<pre>var obj = {
name: 'Anton'
, handle: 'valueof'
, role: 'SW Engineer'
};</pre>
					]]></description>
      </option>
      <option key="loopfunc">
        <description><![CDATA[
						<p>This option suppresses warnings about functions inside of loops. Defining
						functions inside of loops can lead to bugs such as this one:</p>
<pre>var nums = [];

for (var i = 0; i &lt; 10; i++) {
nums[i] = function (j) {
return i + j;
};
}

nums[0](2); // Prints 12 instead of 2</pre>

						<p>To fix the code above you need to copy the value of <code>i</code>:</p>

<pre>var nums = [];

for (var i = 0; i &lt; 10; i++) {
(function (i) {
nums[i] = function (j) {
	return i + j;
}
}(i));
}</pre>
					]]></description>
      </option>
      <option key="multistr">
        <description><![CDATA[
						<p>This option suppresses warnings about multi-line strings. Multi-line strings
						can be dangerous in JavaScript because all hell breaks loose if you accidentally
						put a whitespace in between the escape character (<code>\</code>) and a new line.</p>

						<p>Note that even though this option allows correct multi-line strings, it still
						warns about multi-line strings without escape characters or with anything in between
						the escape character and a whitespace.</p>

<pre>/*jshint multistr:true */

var text = "Hello\
World"; // All good.

text = "Hello
World"; // Warning, no escape character.

text = "Hello\<span style="background-color: hotpink;">&nbsp;</span>
World"; // Warning, there is a space after \ (colored pink)</pre>
                ]]></description>
      </option>
      <option key="onecase">
        <description><![CDATA[
						<p>This option suppresses warnings about switches with just one case. Most
						of the time you want to use <code>if</code> instead of <code>switch</code> if
						there is only one case. However, some code generators prefer to generate
						<code>switch</code> statements.</p>
					]]></description>
      </option>
      <option key="proto">
        <description><![CDATA[<p>This option suppresses warnings about the <code>__proto__</code> property.
						This property is deprecated and not supported by all browsers.</p>]]></description>
      </option>
      <option key="regexdash">
        <description><![CDATA[
						<p>This option suppresses warnings about unescaped <code>-</code> in the end
						of regular expressions.</p>
					]]></description>
      </option>
      <option key="scripturl">
        <description><![CDATA[
						<p>This option suppresses warnings about the use of script-targeted
						URLs—such as <code>javascript:...</code>.</p>
					]]></description>
      </option>
      <option key="smarttabs">
        <description><![CDATA[
						<p>This option suppresses warnings about mixed tabs and spaces when the latter are
						used for alignmnent only. The technique is called
						<a href="http://www.emacswiki.org/emacs/SmartTabs">SmartTabs</a>.</p>
					]]></description>
      </option>
      <option key="shadow">
        <description><![CDATA[
						<p>This option suppresses warnings about variable shadowing i.e. declaring a
						variable that had been already declared somewhere in the outer scope.</p>
					]]></description>
      </option>
      <option key="sub">
        <description><![CDATA[
						<p>This option suppresses warnings about using [] notation when it can be expressed
						in dot notation: <code>person['name']</code> vs. <code>person.name</code>.</p>
					]]></description>
      </option>
      <option key="supernew">
        <description><![CDATA[
						<p>This option suppresses warnings about "weird" constructions like
						<code>new function () { ... }</code> and <code>new Object;</code>. Such
						constructions are sometimes used to produce singletons in JavaScript:</p>
<pre>var singleton = new function() {
var privateVar;

this.publicMethod  = function () {}
this.publicMethod2 = function () {}
};</pre>
					]]></description>
      </option>
      <option key="validthis">
        <description><![CDATA[
						<p>This option suppresses warnings about possible strict violations when
						the code is running in strict mode <strong>and</strong> you use <code>this</code>
						in a non-constructor function. You should use this option—in a function scope
						only—when you are positive that your use of <code>this</code> is valid in
						the strict mode (for example, if you call your function using
						<code>Function.call</code>).</p>

						<p><strong>Note:</strong> This option can be used only inside of a function
						scope. JSHint will fail with an error if you will try to set this option globally.</p>
					]]></description>
      </option>
    </options>
  </group>
  <group title="Environments">
    <description><![CDATA[These options pre-define global variables that are exposed by popular JavaScript
		libraries and runtime environments—such as browser or node.js. Essentially they
		are shortcuts for explicit declarations like <code>/*global $:false,
		jQuery:false */</code>.]]></description>
    <options>
      <option key="browser">
        <description><![CDATA[
						<p>This option defines globals exposed by modern browsers: all the way from good ol'
							<code>document</code> and <code>navigator</code> to the HTML5
							<a href="https://developer.mozilla.org/en/DOM/FileReader">FileReader</a> and
							other new developments in the browser world.</p>

						<p><strong>Note:</strong> This option
							doesn't expose variables like <code>alert</code> or <code>console</code>. See
							option <code>devel</code> for more information.</p>
					]]></description>
      </option>
      <option key="couch">
        <description><![CDATA[<p>This option defines globals exposed by CouchDB.
					<a href="http://couchdb.apache.org/">CouchDB</a> is a document-oriented database
					that can be queried and indexed in a MapReduce fashion using JavaScript.</p>]]></description>
      </option>
      <option key="devel">
        <description><![CDATA[
						<p>This option defines globals that are usually used for logging poor-man's
						debugging: <code>console</code>, <code>alert</code>, etc. It is usually a good idea
						to not ship them in production because, for example, <code>console.log</code>
						breaks in legacy versions of Internet Explorer.</p>
					]]></description>
      </option>
      <option key="dojo">
        <description><![CDATA[<p>This option defines globals exposed by the
						<a href="http://dojotoolkit.org/">Dojo Toolkit</a>.</p>]]></description>
      </option>
      <option key="jquery">
        <description><![CDATA[<p>This option defines globals exposed by the
						<a href="http://jquery.com/">jQuery</a> JavaScript library.</p>]]></description>
      </option>
      <option key="mootools">
        <description><![CDATA[<p>This option defines globals exposed by the
						<a href="http://mootools.net/">MooTools</a> JavaScript framework.</p>]]></description>
      </option>
      <option key="node">
        <description><![CDATA[<p>This option defines globals available when your code is running inside of
					the Node runtime environment. <a href="http://nodejs.org/">Node.js</a> is a server-side
					JavaScript environment that uses an asynchronous event-driven model.</p>]]></description>
      </option>
      <option key="nonstandard">
        <description><![CDATA[<p>This option defines non-standard but widely adopted globals such as
					<code>escape</code> and <code>unescape</code>.</p>]]></description>
      </option>
      <option key="prototypejs">
        <description><![CDATA[<p>This option defines globals exposed by the
						<a href="http://www.prototypejs.org/">Prototype</a> JavaScript framework.</p>
					]]></description>
      </option>
      <option key="rhino">
        <description><![CDATA[<p>This option defines globals available when your code is running inside of
					the Rhino runtime environment. <a href="http://www.mozilla.org/rhino/">Rhino</a> is an
					open-source implementation of JavaScript written entirely in Java.</p>]]></description>
      </option>
      <option key="worker">
        <description><![CDATA[<p>This option defines globals available when your code is running inside of
						a Web Worker. <a href="https://developer.mozilla.org/en/Using_web_workers">Web Workers</a>
						provide a simple means for web content to run scripts in background threads.</p>
					]]></description>
      </option>
      <option key="wsh">
        <description><![CDATA[<p>This option defines globals available when your code is running as a script
					for the <a href="http://en.wikipedia.org/wiki/Windows_Script_Host">Windows Script
					Host</a>.</p>]]></description>
      </option>
      <option key="yui">
        <description><![CDATA[<p>This option defines globals exposed by the
						<a href="http://yuilibrary.com/">YUI</a> JavaScript framework.</p>]]></description>
      </option>
    </options>
  </group>
  <group title="Legacy">
    <description><![CDATA[These options are legacy from JSLint. Aside from bug fixes they will not be
		improved in any way and might be removed at any point.]]></description>
    <options>
      <option key="nomen">
        <description><![CDATA[
						<p>This option disallows the use of dangling <code>_</code> in variables.
						We don't know why would you need it.</p>]]></description>
      </option>
      <option key="onevar">
        <description><![CDATA[
						<p>This option allows only one <code>var</code> statement per function. Some
						people think that having a single <code>var</code> in a function, at the top of the
						function, helps readability. Example (taken from JSLint/JSHint source code):</p>

<pre>x.nud = function () {
var b, f, i, j, p, seen = {}, t;

b = token.line !== nexttoken.line;
if (b) {
indent += option.indent;
	if (nexttoken.from === indent + option.indent) {
		indent += option.indent;
	}
}

// [...]
};</pre>
					]]></description>
      </option>
      <option key="passfail">
        <description><![CDATA[<p>This option makes JSHint stop on the first error or warning.</p>]]></description>
      </option>
      <option key="white">
        <description><![CDATA[
						<p>This option make JSHint check your source code against Douglas Crockford's
						JavaScript coding style. Unfortunately, his “The Good Parts” book aside,
						the actual rules are not very well documented.</p>
					]]></description>
      </option>
    </options>
  </group>
</groups>